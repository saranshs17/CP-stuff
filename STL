//pair 

--> creating pair:pair<int,string>p 
--> passing reference(changes in this will occur to org also) into another pair : pair<int,string>&p1=p;
--> passing copy(changes in this will not occur to org also) into another pair : pair<int,string>p2=p;
--> creating array of pair: pair<int,int>p_arr[size],, input p_arr[0]={a,b};
--> swap two pos of array of pair:swap(p_arr[0],p_arr[1]);
--> printing array of pair : cout<<p_arr[0].first;


//vector

--> creating vector: vector<int> v;
--> adding element to vector : v.push_back(5);
--> passing refernce to vector &v2=v, passing copy v3=v;
--> vector of pair -->vector<pair<int,int>> v={{1,2},{2,3}},, print--> cout<<v[i].first << v[i].second;
                   -->input --> cin<<x<<y;
                               v.push_back({x,y}) or v.push_back(make_pair(x,y));
--> array of vector vector<int> v[N]; // but int this rows N is fixed
   --> entering n element to ith vector--> for(int i=0;i<N;i++){
                                              int n;
                                              cin>>n;
                                              for(int j=0;j<n;j++){
                                                int x;
                                                cin>>x;
                                                v[i].push_back(x);
                                              }
                                           }                                           
--> printing array of vectors --> for(int i=0;i<N;i++){
                                  for(int j=0;j<v[i].size();++j){
                                  cout<<v[i][j];}}
--> creating dynamic rows and column --> vector of vector : vector<vector<int>> v;
                                     --> taking input : for(int i=0;i<N;i++){
                                                        int n;
                                                        cin>>n;
                                                        //create temp vector and insert it in original vector
                                                        vector<int>temp;
                                                        for(int j=0;j<n;j++){
                                                        int x;
                                                        cin>>x;
                                                        temp.push_back(x);
                                                        }
                                                        v.push_back(temp);
                                                        }
                                                        
-->printing vector of vector: --> for(int i=0;i<N;i++){
                                  for(int j=0;j<v[i].size();++j){
                                  cout<<v[i][j];}}                                                       
                                                        
//iterator        
-->creating iterator of vector : vector<int>::iterator it;
--> printing element of vector using iterator : for(it=v.begin();it!=v.end();++it){
                                                cout<<(*it)<<ln;
                                                }
--> for pair: vector<pair<int,int>> vp={{1,2},{3,4},{5,6}}
              vector<pair<int,int>> :: iterator it;
              for(it=vp.begin();it!=vp.end();++it){
              cout<<(*it).first<<(*it).second<<ln or cout<<(it->first)<<(it->second)<<ln;
              }

// range controlled loop 
--> for(int(data type) value(copy of every element of vector here):v){
        cout<<value;
    } 
--> for(pair<int,int> &value:v)cout<<value.first;
--> for(auto value:v)cout<<value;

//map
* key is unique so if it is re-assigned then it will be overwritten
--> map<int,string> m; // map is a key-value pair  
    m[1]="abc";  // TC: O(log(n))  --> m[6] means key 6 has an empty string or number 0 
    m[5]="cab";
    m[2]="bcd";
    m.insert({4,"dca"}); // always prints in sorted order of key or lexiographically
    map<int,string>::iterator it;
    for(it=m.begin();it!=m.end();++it){   // can't use it=it+1
        cout<<it->first<<" "<<it->second<<ln;
    } 
or  
    for(auto it=m.begin();it!=m.end();++it){
        cout<<it->first<<" "<<it->second<<ln;
    }
or  
    for(auto &pr:m)cout<<pr.first<<" "<<pr.second<<ln;
--> for finding value -->auto it=m.find('b');
                         if(it==m.end())cout<<"no value"; //execute if key not exist
                         else cout<<it->second;
                      --> auto it=find('d');
                          if(it!=m.end())
                          m.erase(it); // will remove 'd' and its value if it present
--> unordered_map -->> 1.inbuilt implementation // complex function can't use
                       2. less time complexity // O(1) 
                       3. valid keys datatype
                  --> unordered_map<int,string> m; //rando m order 
--> multimap-->> to store multiple value of same key

// ordered set : sorted order lexiographically and only one times i.e. unique
-->set<string> s;
   s.insert("abc");
   for(auto val:s)cout<<val<<ln;
--> has erase function and find function ,works like map

//unordered set --> complex function can't use 
                --> to check the presence i.e. order not matter // less time complexity

// multiset --> to print duplicate values 

**Note: while erasing using iterator it will delete only one value but when delete using value it will delete all element having that value
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        
